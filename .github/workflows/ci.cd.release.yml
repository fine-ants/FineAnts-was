name: ci-cd

on:
  push:
    branches: [ release ]

permissions:
  contents: read

env:
  S3_BUCKET_NAME: fineants2024
  AWS_REGION: ap-northeast-2
  CODEDEPLOY_NAME: fineAnts
  CODEDEPLOY_GROUP: release
  ACTIONS_STEP_DEBUG: true
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub 사용자명
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub 비밀번호
  DOCKER_IMAGE_NAME: fineants-app  # 이미지 이름 (원하는 이름으로 설정)
  TAG: release-latest

jobs:
  build-image:
    runs-on: ubuntu-20.04
    environment: aws2024
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4.1.7
        with:
          submodules: true
          token: ${{ secrets.GIT_TOKEN }}
      ## JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.2
        with:
          java-version: '17'
          distribution: 'temurin'
      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v4.0.2
        with:
          # 캐시할 디렉토리 경로를 지정합니다.
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          # 캐시를 구분하는 키를 지정합니다.
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          # 이전에 생성된 캐시를 복원하는데 사용할 키를 지정합니다.
          # 캐시가 없거나 만료되었을때 이 키를 기반으로 이전에 생성된 캐시를 찾아 복원합니다.
          restore-keys: |
            ${{ runner.os }}-gradle-
      # gradlew 실행을 위해서 실행 권한을 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      # Timezone 설정
      - name: Set timezone to Asia/Seoul
        run: sudo timedatectl set-timezone Asia/Seoul
      # Gradle을 이용하여 빌드 수행
      - name: build bootJar
        run: ./gradlew bootJar
      # Docker 빌드
      - name: Build Docker image
        run: docker build -t $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:$TAG .
      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # Docker 이미지 푸시
      - name: Push Docker image to Docker Hub
        run: docker push $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:$TAG
      # zip 파일 생성
      - name: Make zip file
        run: zip -r ./$GITHUB_SHA.zip scripts/ loki/ promtail/ redis/ secret/ appspec.yml docker-compose.release.yml
      # AWS 인증정보 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      # S3에 업로드
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/deploy/release/$GITHUB_SHA.zip
      # 코드 배포
      - name: Code Deploy
        run: aws deploy create-deployment \
          --application-name $CODEDEPLOY_NAME \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name $CODEDEPLOY_GROUP \
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=deploy/release/$GITHUB_SHA.zip
